using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Xamarin.Forms;
using System.Threading.Tasks;

namespace FitnessApp.Portable
{
    public class WSConsumer
    {
        private static HttpClient restClient;

        public async static Task<List<Unit>> GetUnits()
        {
            List<Unit> units = new List<Unit>();
            try
            {
                // Get the json data from the web service
                // deserialize the data into units
                units = await GetList<Unit>("http://psotty.pythonanywhere.com/units");
                
                DependencyService.Get<IMessage>().longtime("Load units from Web Service");
            }
            catch(Exception e)
            {
                DependencyService.Get<IMessage>().longtime("ERR: "+e.Message);
                throw e;
            }
            return units;
        }

        public async static Task<List<Unit>> AddUnit(Unit unit)
        {
            // TO DO:
            // serialize unit in json format
            // send the serialized unit to the web service
            // get the new list
            List<Unit> units = new List<Unit>();
            try
            {
                string jsonUnit = JsonConvert.SerializeObject(unit);
                units = await Send<Unit>("http://psotty.pythonanywhere.com/units", jsonUnit);
                
                DependencyService.Get<IMessage>().longtime("Load units from Web Service");
            }
            catch (Exception e)
            {
                DependencyService.Get<IMessage>().longtime("ERR save unit: " + e.Message);
                throw e;
            }
            return units;
        }

        public async static Task<List<SportType>> GetSports()
        {
            List<SportType> sports = new List<SportType>();
            try
            {
                // Get the json data from the web service
                // deserialize the data into sports
                sports = await GetList<SportType>("http://psotty.pythonanywhere.com/sports");

                DependencyService.Get<IMessage>().longtime("Load from Web Service");
            }
            catch (Exception e)
            {
                DependencyService.Get<IMessage>().longtime("ERR: " + e.Message);
                throw e;
            }
            return sports;
        }

        public static async Task<List<SportType>> AddSport(SportType sport)
        {
            List<SportType> sports = new List<SportType>();
            // TO DO:
            // serialize sport in json format
            // send the serialized sport to the web service
            // get the new list
            try
            {
                string jsonUnit = JsonConvert.SerializeObject(sport);
                sports = await Send<SportType>("http://psotty.pythonanywhere.com/units", jsonUnit);

                DependencyService.Get<IMessage>().longtime("Load units from Web Service");
            }
            catch (Exception e)
            {
                DependencyService.Get<IMessage>().longtime("ERR save unit: " + e.Message);
                throw e;
            }
            return sports;
        }

        public List<Session> GetSessions()
        {
            List<Session> sessions = new List<Session>();
            // TO DO:
            // Get the json data from the web service
            // deserialize the data into sessions
            return sessions;
        }

        public void AddSession(Session session)
        {
            // TO DO:
            // serialize session in json format
            // send the serialized session to the web service
            // get the new list
        }

        public void SaveUser(User user)
        {
            // TO DO:
            // serialize user in json format
            // send the serialized user to the web service
            // get the id generated by the WS
        }

        public static async Task<List<T>> GetList<T>(string url)
        {
            List<T> list = new List<T>();
            string value = "";
            // connection to the web service
            string request = "";
            restClient = new HttpClient();
            try
            {
                restClient.BaseAddress = new Uri(url);
                restClient.DefaultRequestHeaders.Clear();
                restClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("text/json"));
                value = await restClient.GetStringAsync(request);
                // clean the string to just have the array
                value = value.Remove(0, value.IndexOf("[") - 1);
                value = value.Remove(value.LastIndexOf("]") + 1);

                list = JsonConvert.DeserializeObject<List<T>>(value);
            }
            catch (Exception e)
            {
                throw e;
            }
            return list;
        }

        public static async Task<List<T>> Send<T>(string url, string jsonObject)
        {
            List<T> list = new List<T>();
            string value = "";
            // connection to the web service
            string request = "";
            restClient = new HttpClient();
            try
            {
                // def header
                restClient.BaseAddress = new Uri(url);
                restClient.DefaultRequestHeaders.Clear();
                restClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("text/json"));

                // def body
                var content = new StringContent(jsonObject.ToLower(), Encoding.UTF8, "application/json");
                var answer = await restClient.PostAsync(url, content);
                var result = answer.Content;
                // get the result : new json representation of corresponding list
                // value = await restClient.GetStringAsync(request);
                DependencyService.Get<IMessage>().longtime("save : " + result.ToString());

                // clean the string to just have the array
                value = value.Remove(0, value.IndexOf("[") - 1);
                value = value.Remove(value.LastIndexOf("]") + 1);

                list = JsonConvert.DeserializeObject<List<T>>(value);
            }
            catch (Exception e)
            {
                throw e;
            }
            return list;

        }
    }
}
